// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -destination=mock/client.go -package=mock -mock_names=API=Client github.com/nukosuke/go-zendesk/zendesk API
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	zendesk "github.com/nukosuke/go-zendesk/zendesk"
	gomock "go.uber.org/mock/gomock"
)

// Client is a mock of API interface.
type Client struct {
	ctrl     *gomock.Controller
	recorder *ClientMockRecorder
}

// ClientMockRecorder is the mock recorder for Client.
type ClientMockRecorder struct {
	mock *Client
}

// NewClient creates a new mock instance.
func NewClient(ctrl *gomock.Controller) *Client {
	mock := &Client{ctrl: ctrl}
	mock.recorder = &ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Client) EXPECT() *ClientMockRecorder {
	return m.recorder
}

// AddOrganizationTags mocks base method.
func (m *Client) AddOrganizationTags(ctx context.Context, organizationID int64, tags []zendesk.Tag) ([]zendesk.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrganizationTags", ctx, organizationID, tags)
	ret0, _ := ret[0].([]zendesk.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrganizationTags indicates an expected call of AddOrganizationTags.
func (mr *ClientMockRecorder) AddOrganizationTags(ctx, organizationID, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrganizationTags", reflect.TypeOf((*Client)(nil).AddOrganizationTags), ctx, organizationID, tags)
}

// AddTicketTags mocks base method.
func (m *Client) AddTicketTags(ctx context.Context, ticketID int64, tags []zendesk.Tag) ([]zendesk.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTicketTags", ctx, ticketID, tags)
	ret0, _ := ret[0].([]zendesk.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTicketTags indicates an expected call of AddTicketTags.
func (mr *ClientMockRecorder) AddTicketTags(ctx, ticketID, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTicketTags", reflect.TypeOf((*Client)(nil).AddTicketTags), ctx, ticketID, tags)
}

// AddUserTags mocks base method.
func (m *Client) AddUserTags(ctx context.Context, userID int64, tags []zendesk.Tag) ([]zendesk.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserTags", ctx, userID, tags)
	ret0, _ := ret[0].([]zendesk.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserTags indicates an expected call of AddUserTags.
func (mr *ClientMockRecorder) AddUserTags(ctx, userID, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserTags", reflect.TypeOf((*Client)(nil).AddUserTags), ctx, userID, tags)
}

// AutocompleteOrganizations mocks base method.
func (m *Client) AutocompleteOrganizations(ctx context.Context, opts *zendesk.OrganizationListOptions) ([]zendesk.Organization, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutocompleteOrganizations", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Organization)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AutocompleteOrganizations indicates an expected call of AutocompleteOrganizations.
func (mr *ClientMockRecorder) AutocompleteOrganizations(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutocompleteOrganizations", reflect.TypeOf((*Client)(nil).AutocompleteOrganizations), ctx, opts)
}

// AutocompleteSearchCustomObjectRecords mocks base method.
func (m *Client) AutocompleteSearchCustomObjectRecords(ctx context.Context, customObjectKey string, opts *zendesk.AutocompleteSearchCustomObjectRecordsOptions) ([]zendesk.CustomObjectRecord, zendesk.CursorPaginationMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutocompleteSearchCustomObjectRecords", ctx, customObjectKey, opts)
	ret0, _ := ret[0].([]zendesk.CustomObjectRecord)
	ret1, _ := ret[1].(zendesk.CursorPaginationMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AutocompleteSearchCustomObjectRecords indicates an expected call of AutocompleteSearchCustomObjectRecords.
func (mr *ClientMockRecorder) AutocompleteSearchCustomObjectRecords(ctx, customObjectKey, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutocompleteSearchCustomObjectRecords", reflect.TypeOf((*Client)(nil).AutocompleteSearchCustomObjectRecords), ctx, customObjectKey, opts)
}

// AutocompleteUsers mocks base method.
func (m *Client) AutocompleteUsers(ctx context.Context, opts *zendesk.UserListOptions) ([]zendesk.User, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutocompleteUsers", ctx, opts)
	ret0, _ := ret[0].([]zendesk.User)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AutocompleteUsers indicates an expected call of AutocompleteUsers.
func (mr *ClientMockRecorder) AutocompleteUsers(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutocompleteUsers", reflect.TypeOf((*Client)(nil).AutocompleteUsers), ctx, opts)
}

// CreateAutomation mocks base method.
func (m *Client) CreateAutomation(ctx context.Context, automation zendesk.Automation) (zendesk.Automation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAutomation", ctx, automation)
	ret0, _ := ret[0].(zendesk.Automation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAutomation indicates an expected call of CreateAutomation.
func (mr *ClientMockRecorder) CreateAutomation(ctx, automation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAutomation", reflect.TypeOf((*Client)(nil).CreateAutomation), ctx, automation)
}

// CreateBrand mocks base method.
func (m *Client) CreateBrand(ctx context.Context, brand zendesk.Brand) (zendesk.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBrand", ctx, brand)
	ret0, _ := ret[0].(zendesk.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBrand indicates an expected call of CreateBrand.
func (mr *ClientMockRecorder) CreateBrand(ctx, brand any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBrand", reflect.TypeOf((*Client)(nil).CreateBrand), ctx, brand)
}

// CreateCustomObjectRecord mocks base method.
func (m *Client) CreateCustomObjectRecord(ctx context.Context, record zendesk.CustomObjectRecord, customObjectKey string) (zendesk.CustomObjectRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomObjectRecord", ctx, record, customObjectKey)
	ret0, _ := ret[0].(zendesk.CustomObjectRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomObjectRecord indicates an expected call of CreateCustomObjectRecord.
func (mr *ClientMockRecorder) CreateCustomObjectRecord(ctx, record, customObjectKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomObjectRecord", reflect.TypeOf((*Client)(nil).CreateCustomObjectRecord), ctx, record, customObjectKey)
}

// CreateDynamicContentItem mocks base method.
func (m *Client) CreateDynamicContentItem(ctx context.Context, item zendesk.DynamicContentItem) (zendesk.DynamicContentItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDynamicContentItem", ctx, item)
	ret0, _ := ret[0].(zendesk.DynamicContentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDynamicContentItem indicates an expected call of CreateDynamicContentItem.
func (mr *ClientMockRecorder) CreateDynamicContentItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDynamicContentItem", reflect.TypeOf((*Client)(nil).CreateDynamicContentItem), ctx, item)
}

// CreateGroup mocks base method.
func (m *Client) CreateGroup(ctx context.Context, group zendesk.Group) (zendesk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, group)
	ret0, _ := ret[0].(zendesk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *ClientMockRecorder) CreateGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*Client)(nil).CreateGroup), ctx, group)
}

// CreateMacro mocks base method.
func (m *Client) CreateMacro(ctx context.Context, macro zendesk.Macro) (zendesk.Macro, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMacro", ctx, macro)
	ret0, _ := ret[0].(zendesk.Macro)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMacro indicates an expected call of CreateMacro.
func (mr *ClientMockRecorder) CreateMacro(ctx, macro any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMacro", reflect.TypeOf((*Client)(nil).CreateMacro), ctx, macro)
}

// CreateOrUpdateUser mocks base method.
func (m *Client) CreateOrUpdateUser(ctx context.Context, user zendesk.User) (zendesk.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateUser", ctx, user)
	ret0, _ := ret[0].(zendesk.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateUser indicates an expected call of CreateOrUpdateUser.
func (mr *ClientMockRecorder) CreateOrUpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateUser", reflect.TypeOf((*Client)(nil).CreateOrUpdateUser), ctx, user)
}

// CreateOrganization mocks base method.
func (m *Client) CreateOrganization(ctx context.Context, org zendesk.Organization) (zendesk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, org)
	ret0, _ := ret[0].(zendesk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *ClientMockRecorder) CreateOrganization(ctx, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*Client)(nil).CreateOrganization), ctx, org)
}

// CreateOrganizationField mocks base method.
func (m *Client) CreateOrganizationField(ctx context.Context, organizationField zendesk.OrganizationField) (zendesk.OrganizationField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationField", ctx, organizationField)
	ret0, _ := ret[0].(zendesk.OrganizationField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationField indicates an expected call of CreateOrganizationField.
func (mr *ClientMockRecorder) CreateOrganizationField(ctx, organizationField any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationField", reflect.TypeOf((*Client)(nil).CreateOrganizationField), ctx, organizationField)
}

// CreateOrganizationMembership mocks base method.
func (m *Client) CreateOrganizationMembership(arg0 context.Context, arg1 zendesk.OrganizationMembershipOptions) (zendesk.OrganizationMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationMembership", arg0, arg1)
	ret0, _ := ret[0].(zendesk.OrganizationMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationMembership indicates an expected call of CreateOrganizationMembership.
func (mr *ClientMockRecorder) CreateOrganizationMembership(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationMembership", reflect.TypeOf((*Client)(nil).CreateOrganizationMembership), arg0, arg1)
}

// CreateOrganizationSubscription mocks base method.
func (m *Client) CreateOrganizationSubscription(ctx context.Context, sub zendesk.OrganizationSubscription) (zendesk.OrganizationSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationSubscription", ctx, sub)
	ret0, _ := ret[0].(zendesk.OrganizationSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationSubscription indicates an expected call of CreateOrganizationSubscription.
func (mr *ClientMockRecorder) CreateOrganizationSubscription(ctx, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationSubscription", reflect.TypeOf((*Client)(nil).CreateOrganizationSubscription), ctx, sub)
}

// CreateSLAPolicy mocks base method.
func (m *Client) CreateSLAPolicy(ctx context.Context, slaPolicy zendesk.SLAPolicy) (zendesk.SLAPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSLAPolicy", ctx, slaPolicy)
	ret0, _ := ret[0].(zendesk.SLAPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSLAPolicy indicates an expected call of CreateSLAPolicy.
func (mr *ClientMockRecorder) CreateSLAPolicy(ctx, slaPolicy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSLAPolicy", reflect.TypeOf((*Client)(nil).CreateSLAPolicy), ctx, slaPolicy)
}

// CreateTarget mocks base method.
func (m *Client) CreateTarget(ctx context.Context, ticketField zendesk.Target) (zendesk.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTarget", ctx, ticketField)
	ret0, _ := ret[0].(zendesk.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTarget indicates an expected call of CreateTarget.
func (mr *ClientMockRecorder) CreateTarget(ctx, ticketField any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTarget", reflect.TypeOf((*Client)(nil).CreateTarget), ctx, ticketField)
}

// CreateTicket mocks base method.
func (m *Client) CreateTicket(ctx context.Context, ticket zendesk.Ticket) (zendesk.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", ctx, ticket)
	ret0, _ := ret[0].(zendesk.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *ClientMockRecorder) CreateTicket(ctx, ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*Client)(nil).CreateTicket), ctx, ticket)
}

// CreateTicketComment mocks base method.
func (m *Client) CreateTicketComment(ctx context.Context, ticketID int64, ticketComment zendesk.TicketComment) (zendesk.TicketComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicketComment", ctx, ticketID, ticketComment)
	ret0, _ := ret[0].(zendesk.TicketComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicketComment indicates an expected call of CreateTicketComment.
func (mr *ClientMockRecorder) CreateTicketComment(ctx, ticketID, ticketComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicketComment", reflect.TypeOf((*Client)(nil).CreateTicketComment), ctx, ticketID, ticketComment)
}

// CreateTicketField mocks base method.
func (m *Client) CreateTicketField(ctx context.Context, ticketField zendesk.TicketField) (zendesk.TicketField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicketField", ctx, ticketField)
	ret0, _ := ret[0].(zendesk.TicketField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicketField indicates an expected call of CreateTicketField.
func (mr *ClientMockRecorder) CreateTicketField(ctx, ticketField any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicketField", reflect.TypeOf((*Client)(nil).CreateTicketField), ctx, ticketField)
}

// CreateTicketForm mocks base method.
func (m *Client) CreateTicketForm(ctx context.Context, ticketForm zendesk.TicketForm) (zendesk.TicketForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicketForm", ctx, ticketForm)
	ret0, _ := ret[0].(zendesk.TicketForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicketForm indicates an expected call of CreateTicketForm.
func (mr *ClientMockRecorder) CreateTicketForm(ctx, ticketForm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicketForm", reflect.TypeOf((*Client)(nil).CreateTicketForm), ctx, ticketForm)
}

// CreateTrigger mocks base method.
func (m *Client) CreateTrigger(ctx context.Context, trigger zendesk.Trigger) (zendesk.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrigger", ctx, trigger)
	ret0, _ := ret[0].(zendesk.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *ClientMockRecorder) CreateTrigger(ctx, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*Client)(nil).CreateTrigger), ctx, trigger)
}

// CreateUser mocks base method.
func (m *Client) CreateUser(ctx context.Context, user zendesk.User) (zendesk.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(zendesk.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *ClientMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Client)(nil).CreateUser), ctx, user)
}

// CreateUserField mocks base method.
func (m *Client) CreateUserField(ctx context.Context, userField zendesk.UserField) (zendesk.UserField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserField", ctx, userField)
	ret0, _ := ret[0].(zendesk.UserField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserField indicates an expected call of CreateUserField.
func (mr *ClientMockRecorder) CreateUserField(ctx, userField any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserField", reflect.TypeOf((*Client)(nil).CreateUserField), ctx, userField)
}

// CreateWebhook mocks base method.
func (m *Client) CreateWebhook(ctx context.Context, hook *zendesk.Webhook) (*zendesk.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", ctx, hook)
	ret0, _ := ret[0].(*zendesk.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *ClientMockRecorder) CreateWebhook(ctx, hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*Client)(nil).CreateWebhook), ctx, hook)
}

// Delete mocks base method.
func (m *Client) Delete(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ClientMockRecorder) Delete(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Client)(nil).Delete), ctx, path)
}

// DeleteAutomation mocks base method.
func (m *Client) DeleteAutomation(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAutomation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAutomation indicates an expected call of DeleteAutomation.
func (mr *ClientMockRecorder) DeleteAutomation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAutomation", reflect.TypeOf((*Client)(nil).DeleteAutomation), ctx, id)
}

// DeleteBrand mocks base method.
func (m *Client) DeleteBrand(ctx context.Context, brandID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBrand", ctx, brandID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBrand indicates an expected call of DeleteBrand.
func (mr *ClientMockRecorder) DeleteBrand(ctx, brandID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBrand", reflect.TypeOf((*Client)(nil).DeleteBrand), ctx, brandID)
}

// DeleteCustomObjectRecord mocks base method.
func (m *Client) DeleteCustomObjectRecord(ctx context.Context, record zendesk.CustomObjectRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomObjectRecord", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomObjectRecord indicates an expected call of DeleteCustomObjectRecord.
func (mr *ClientMockRecorder) DeleteCustomObjectRecord(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomObjectRecord", reflect.TypeOf((*Client)(nil).DeleteCustomObjectRecord), ctx, record)
}

// DeleteDynamicContentItem mocks base method.
func (m *Client) DeleteDynamicContentItem(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDynamicContentItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDynamicContentItem indicates an expected call of DeleteDynamicContentItem.
func (mr *ClientMockRecorder) DeleteDynamicContentItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDynamicContentItem", reflect.TypeOf((*Client)(nil).DeleteDynamicContentItem), ctx, id)
}

// DeleteGroup mocks base method.
func (m *Client) DeleteGroup(ctx context.Context, groupID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *ClientMockRecorder) DeleteGroup(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*Client)(nil).DeleteGroup), ctx, groupID)
}

// DeleteMacro mocks base method.
func (m *Client) DeleteMacro(ctx context.Context, macroID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMacro", ctx, macroID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMacro indicates an expected call of DeleteMacro.
func (mr *ClientMockRecorder) DeleteMacro(ctx, macroID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMacro", reflect.TypeOf((*Client)(nil).DeleteMacro), ctx, macroID)
}

// DeleteOrganization mocks base method.
func (m *Client) DeleteOrganization(ctx context.Context, orgID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *ClientMockRecorder) DeleteOrganization(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*Client)(nil).DeleteOrganization), ctx, orgID)
}

// DeleteOrganizationSubscription mocks base method.
func (m *Client) DeleteOrganizationSubscription(ctx context.Context, subID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationSubscription", ctx, subID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganizationSubscription indicates an expected call of DeleteOrganizationSubscription.
func (mr *ClientMockRecorder) DeleteOrganizationSubscription(ctx, subID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationSubscription", reflect.TypeOf((*Client)(nil).DeleteOrganizationSubscription), ctx, subID)
}

// DeleteSLAPolicy mocks base method.
func (m *Client) DeleteSLAPolicy(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSLAPolicy", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSLAPolicy indicates an expected call of DeleteSLAPolicy.
func (mr *ClientMockRecorder) DeleteSLAPolicy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSLAPolicy", reflect.TypeOf((*Client)(nil).DeleteSLAPolicy), ctx, id)
}

// DeleteTarget mocks base method.
func (m *Client) DeleteTarget(ctx context.Context, ticketID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTarget", ctx, ticketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTarget indicates an expected call of DeleteTarget.
func (mr *ClientMockRecorder) DeleteTarget(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTarget", reflect.TypeOf((*Client)(nil).DeleteTarget), ctx, ticketID)
}

// DeleteTicket mocks base method.
func (m *Client) DeleteTicket(ctx context.Context, ticketID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", ctx, ticketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *ClientMockRecorder) DeleteTicket(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*Client)(nil).DeleteTicket), ctx, ticketID)
}

// DeleteTicketField mocks base method.
func (m *Client) DeleteTicketField(ctx context.Context, ticketID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicketField", ctx, ticketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicketField indicates an expected call of DeleteTicketField.
func (mr *ClientMockRecorder) DeleteTicketField(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicketField", reflect.TypeOf((*Client)(nil).DeleteTicketField), ctx, ticketID)
}

// DeleteTicketForm mocks base method.
func (m *Client) DeleteTicketForm(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicketForm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicketForm indicates an expected call of DeleteTicketForm.
func (mr *ClientMockRecorder) DeleteTicketForm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicketForm", reflect.TypeOf((*Client)(nil).DeleteTicketForm), ctx, id)
}

// DeleteTrigger mocks base method.
func (m *Client) DeleteTrigger(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrigger", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrigger indicates an expected call of DeleteTrigger.
func (mr *ClientMockRecorder) DeleteTrigger(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrigger", reflect.TypeOf((*Client)(nil).DeleteTrigger), ctx, id)
}

// DeleteUpload mocks base method.
func (m *Client) DeleteUpload(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUpload", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUpload indicates an expected call of DeleteUpload.
func (mr *ClientMockRecorder) DeleteUpload(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUpload", reflect.TypeOf((*Client)(nil).DeleteUpload), ctx, token)
}

// DeleteWebhook mocks base method.
func (m *Client) DeleteWebhook(ctx context.Context, webhookID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", ctx, webhookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *ClientMockRecorder) DeleteWebhook(ctx, webhookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*Client)(nil).DeleteWebhook), ctx, webhookID)
}

// FilterCustomObjectRecords mocks base method.
func (m *Client) FilterCustomObjectRecords(ctx context.Context, customObjectKey string, filterBody any, opts *zendesk.CursorPagination) ([]zendesk.CustomObjectRecord, zendesk.CursorPaginationMeta, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterCustomObjectRecords", ctx, customObjectKey, filterBody, opts)
	ret0, _ := ret[0].([]zendesk.CustomObjectRecord)
	ret1, _ := ret[1].(zendesk.CursorPaginationMeta)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// FilterCustomObjectRecords indicates an expected call of FilterCustomObjectRecords.
func (mr *ClientMockRecorder) FilterCustomObjectRecords(ctx, customObjectKey, filterBody, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterCustomObjectRecords", reflect.TypeOf((*Client)(nil).FilterCustomObjectRecords), ctx, customObjectKey, filterBody, opts)
}

// Get mocks base method.
func (m *Client) Get(ctx context.Context, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ClientMockRecorder) Get(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Client)(nil).Get), ctx, path)
}

// GetAllTicketAudits mocks base method.
func (m *Client) GetAllTicketAudits(ctx context.Context, opts zendesk.CursorOption) ([]zendesk.TicketAudit, zendesk.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTicketAudits", ctx, opts)
	ret0, _ := ret[0].([]zendesk.TicketAudit)
	ret1, _ := ret[1].(zendesk.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllTicketAudits indicates an expected call of GetAllTicketAudits.
func (mr *ClientMockRecorder) GetAllTicketAudits(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTicketAudits", reflect.TypeOf((*Client)(nil).GetAllTicketAudits), ctx, opts)
}

// GetAttachment mocks base method.
func (m *Client) GetAttachment(ctx context.Context, id int64) (zendesk.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachment", ctx, id)
	ret0, _ := ret[0].(zendesk.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachment indicates an expected call of GetAttachment.
func (mr *ClientMockRecorder) GetAttachment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachment", reflect.TypeOf((*Client)(nil).GetAttachment), ctx, id)
}

// GetAutomation mocks base method.
func (m *Client) GetAutomation(ctx context.Context, id int64) (zendesk.Automation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomation", ctx, id)
	ret0, _ := ret[0].(zendesk.Automation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomation indicates an expected call of GetAutomation.
func (mr *ClientMockRecorder) GetAutomation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomation", reflect.TypeOf((*Client)(nil).GetAutomation), ctx, id)
}

// GetAutomations mocks base method.
func (m *Client) GetAutomations(ctx context.Context, opts *zendesk.AutomationListOptions) ([]zendesk.Automation, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomations", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Automation)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAutomations indicates an expected call of GetAutomations.
func (mr *ClientMockRecorder) GetAutomations(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomations", reflect.TypeOf((*Client)(nil).GetAutomations), ctx, opts)
}

// GetBrand mocks base method.
func (m *Client) GetBrand(ctx context.Context, brandID int64) (zendesk.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrand", ctx, brandID)
	ret0, _ := ret[0].(zendesk.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBrand indicates an expected call of GetBrand.
func (mr *ClientMockRecorder) GetBrand(ctx, brandID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrand", reflect.TypeOf((*Client)(nil).GetBrand), ctx, brandID)
}

// GetCountTicketsInViews mocks base method.
func (m *Client) GetCountTicketsInViews(ctx context.Context, ids []string) ([]zendesk.ViewCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountTicketsInViews", ctx, ids)
	ret0, _ := ret[0].([]zendesk.ViewCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountTicketsInViews indicates an expected call of GetCountTicketsInViews.
func (mr *ClientMockRecorder) GetCountTicketsInViews(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountTicketsInViews", reflect.TypeOf((*Client)(nil).GetCountTicketsInViews), ctx, ids)
}

// GetCustomRoles mocks base method.
func (m *Client) GetCustomRoles(ctx context.Context) ([]zendesk.CustomRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomRoles", ctx)
	ret0, _ := ret[0].([]zendesk.CustomRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomRoles indicates an expected call of GetCustomRoles.
func (mr *ClientMockRecorder) GetCustomRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomRoles", reflect.TypeOf((*Client)(nil).GetCustomRoles), ctx)
}

// GetDynamicContentItem mocks base method.
func (m *Client) GetDynamicContentItem(ctx context.Context, id int64) (zendesk.DynamicContentItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamicContentItem", ctx, id)
	ret0, _ := ret[0].(zendesk.DynamicContentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDynamicContentItem indicates an expected call of GetDynamicContentItem.
func (mr *ClientMockRecorder) GetDynamicContentItem(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamicContentItem", reflect.TypeOf((*Client)(nil).GetDynamicContentItem), ctx, id)
}

// GetDynamicContentItems mocks base method.
func (m *Client) GetDynamicContentItems(ctx context.Context) ([]zendesk.DynamicContentItem, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamicContentItems", ctx)
	ret0, _ := ret[0].([]zendesk.DynamicContentItem)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDynamicContentItems indicates an expected call of GetDynamicContentItems.
func (mr *ClientMockRecorder) GetDynamicContentItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamicContentItems", reflect.TypeOf((*Client)(nil).GetDynamicContentItems), ctx)
}

// GetGroup mocks base method.
func (m *Client) GetGroup(ctx context.Context, groupID int64) (zendesk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", ctx, groupID)
	ret0, _ := ret[0].(zendesk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *ClientMockRecorder) GetGroup(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*Client)(nil).GetGroup), ctx, groupID)
}

// GetGroupMemberships mocks base method.
func (m *Client) GetGroupMemberships(arg0 context.Context, arg1 *zendesk.GroupMembershipListOptions) ([]zendesk.GroupMembership, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMemberships", arg0, arg1)
	ret0, _ := ret[0].([]zendesk.GroupMembership)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupMemberships indicates an expected call of GetGroupMemberships.
func (mr *ClientMockRecorder) GetGroupMemberships(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMemberships", reflect.TypeOf((*Client)(nil).GetGroupMemberships), arg0, arg1)
}

// GetGroups mocks base method.
func (m *Client) GetGroups(ctx context.Context, opts *zendesk.GroupListOptions) ([]zendesk.Group, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Group)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroups indicates an expected call of GetGroups.
func (mr *ClientMockRecorder) GetGroups(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*Client)(nil).GetGroups), ctx, opts)
}

// GetGroupsCBP mocks base method.
func (m *Client) GetGroupsCBP(ctx context.Context, opts *zendesk.CBPOptions) ([]zendesk.Group, zendesk.CursorPaginationMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsCBP", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Group)
	ret1, _ := ret[1].(zendesk.CursorPaginationMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupsCBP indicates an expected call of GetGroupsCBP.
func (mr *ClientMockRecorder) GetGroupsCBP(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsCBP", reflect.TypeOf((*Client)(nil).GetGroupsCBP), ctx, opts)
}

// GetGroupsIterator mocks base method.
func (m *Client) GetGroupsIterator(ctx context.Context, opts *zendesk.PaginationOptions) *zendesk.Iterator[zendesk.Group] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsIterator", ctx, opts)
	ret0, _ := ret[0].(*zendesk.Iterator[zendesk.Group])
	return ret0
}

// GetGroupsIterator indicates an expected call of GetGroupsIterator.
func (mr *ClientMockRecorder) GetGroupsIterator(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsIterator", reflect.TypeOf((*Client)(nil).GetGroupsIterator), ctx, opts)
}

// GetGroupsOBP mocks base method.
func (m *Client) GetGroupsOBP(ctx context.Context, opts *zendesk.OBPOptions) ([]zendesk.Group, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsOBP", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Group)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupsOBP indicates an expected call of GetGroupsOBP.
func (mr *ClientMockRecorder) GetGroupsOBP(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsOBP", reflect.TypeOf((*Client)(nil).GetGroupsOBP), ctx, opts)
}

// GetLocales mocks base method.
func (m *Client) GetLocales(ctx context.Context) ([]zendesk.Locale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocales", ctx)
	ret0, _ := ret[0].([]zendesk.Locale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocales indicates an expected call of GetLocales.
func (mr *ClientMockRecorder) GetLocales(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocales", reflect.TypeOf((*Client)(nil).GetLocales), ctx)
}

// GetMacro mocks base method.
func (m *Client) GetMacro(ctx context.Context, macroID int64) (zendesk.Macro, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMacro", ctx, macroID)
	ret0, _ := ret[0].(zendesk.Macro)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMacro indicates an expected call of GetMacro.
func (mr *ClientMockRecorder) GetMacro(ctx, macroID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMacro", reflect.TypeOf((*Client)(nil).GetMacro), ctx, macroID)
}

// GetMacros mocks base method.
func (m *Client) GetMacros(ctx context.Context, opts *zendesk.MacroListOptions) ([]zendesk.Macro, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMacros", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Macro)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMacros indicates an expected call of GetMacros.
func (mr *ClientMockRecorder) GetMacros(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMacros", reflect.TypeOf((*Client)(nil).GetMacros), ctx, opts)
}

// GetManyUsers mocks base method.
func (m *Client) GetManyUsers(ctx context.Context, opts *zendesk.GetManyUsersOptions) ([]zendesk.User, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyUsers", ctx, opts)
	ret0, _ := ret[0].([]zendesk.User)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManyUsers indicates an expected call of GetManyUsers.
func (mr *ClientMockRecorder) GetManyUsers(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyUsers", reflect.TypeOf((*Client)(nil).GetManyUsers), ctx, opts)
}

// GetMultipleTickets mocks base method.
func (m *Client) GetMultipleTickets(ctx context.Context, ticketIDs []int64) ([]zendesk.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleTickets", ctx, ticketIDs)
	ret0, _ := ret[0].([]zendesk.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipleTickets indicates an expected call of GetMultipleTickets.
func (mr *ClientMockRecorder) GetMultipleTickets(ctx, ticketIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleTickets", reflect.TypeOf((*Client)(nil).GetMultipleTickets), ctx, ticketIDs)
}

// GetOrganization mocks base method.
func (m *Client) GetOrganization(ctx context.Context, orgID int64) (zendesk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, orgID)
	ret0, _ := ret[0].(zendesk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *ClientMockRecorder) GetOrganization(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*Client)(nil).GetOrganization), ctx, orgID)
}

// GetOrganizationByExternalID mocks base method.
func (m *Client) GetOrganizationByExternalID(ctx context.Context, externalID string) ([]zendesk.Organization, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationByExternalID", ctx, externalID)
	ret0, _ := ret[0].([]zendesk.Organization)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationByExternalID indicates an expected call of GetOrganizationByExternalID.
func (mr *ClientMockRecorder) GetOrganizationByExternalID(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationByExternalID", reflect.TypeOf((*Client)(nil).GetOrganizationByExternalID), ctx, externalID)
}

// GetOrganizationFields mocks base method.
func (m *Client) GetOrganizationFields(ctx context.Context) ([]zendesk.OrganizationField, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationFields", ctx)
	ret0, _ := ret[0].([]zendesk.OrganizationField)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationFields indicates an expected call of GetOrganizationFields.
func (mr *ClientMockRecorder) GetOrganizationFields(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationFields", reflect.TypeOf((*Client)(nil).GetOrganizationFields), ctx)
}

// GetOrganizationMemberships mocks base method.
func (m *Client) GetOrganizationMemberships(arg0 context.Context, arg1 *zendesk.OrganizationMembershipListOptions) ([]zendesk.OrganizationMembership, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationMemberships", arg0, arg1)
	ret0, _ := ret[0].([]zendesk.OrganizationMembership)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationMemberships indicates an expected call of GetOrganizationMemberships.
func (mr *ClientMockRecorder) GetOrganizationMemberships(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationMemberships", reflect.TypeOf((*Client)(nil).GetOrganizationMemberships), arg0, arg1)
}

// GetOrganizationSubscriptions mocks base method.
func (m *Client) GetOrganizationSubscriptions(ctx context.Context, orgID int64, opts *zendesk.OrganizationListOptions) ([]zendesk.OrganizationSubscription, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationSubscriptions", ctx, orgID, opts)
	ret0, _ := ret[0].([]zendesk.OrganizationSubscription)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationSubscriptions indicates an expected call of GetOrganizationSubscriptions.
func (mr *ClientMockRecorder) GetOrganizationSubscriptions(ctx, orgID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationSubscriptions", reflect.TypeOf((*Client)(nil).GetOrganizationSubscriptions), ctx, orgID, opts)
}

// GetOrganizationTags mocks base method.
func (m *Client) GetOrganizationTags(ctx context.Context, organizationID int64) ([]zendesk.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationTags", ctx, organizationID)
	ret0, _ := ret[0].([]zendesk.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationTags indicates an expected call of GetOrganizationTags.
func (mr *ClientMockRecorder) GetOrganizationTags(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationTags", reflect.TypeOf((*Client)(nil).GetOrganizationTags), ctx, organizationID)
}

// GetOrganizationTickets mocks base method.
func (m *Client) GetOrganizationTickets(ctx context.Context, organizationID int64, ops *zendesk.TicketListOptions) ([]zendesk.Ticket, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationTickets", ctx, organizationID, ops)
	ret0, _ := ret[0].([]zendesk.Ticket)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationTickets indicates an expected call of GetOrganizationTickets.
func (mr *ClientMockRecorder) GetOrganizationTickets(ctx, organizationID, ops any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationTickets", reflect.TypeOf((*Client)(nil).GetOrganizationTickets), ctx, organizationID, ops)
}

// GetOrganizationTicketsCBP mocks base method.
func (m *Client) GetOrganizationTicketsCBP(ctx context.Context, opts *zendesk.CBPOptions) ([]zendesk.Ticket, zendesk.CursorPaginationMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationTicketsCBP", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Ticket)
	ret1, _ := ret[1].(zendesk.CursorPaginationMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationTicketsCBP indicates an expected call of GetOrganizationTicketsCBP.
func (mr *ClientMockRecorder) GetOrganizationTicketsCBP(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationTicketsCBP", reflect.TypeOf((*Client)(nil).GetOrganizationTicketsCBP), ctx, opts)
}

// GetOrganizationTicketsIterator mocks base method.
func (m *Client) GetOrganizationTicketsIterator(ctx context.Context, organizationID int64, opts *zendesk.PaginationOptions) *zendesk.Iterator[zendesk.Ticket] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationTicketsIterator", ctx, organizationID, opts)
	ret0, _ := ret[0].(*zendesk.Iterator[zendesk.Ticket])
	return ret0
}

// GetOrganizationTicketsIterator indicates an expected call of GetOrganizationTicketsIterator.
func (mr *ClientMockRecorder) GetOrganizationTicketsIterator(ctx, organizationID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationTicketsIterator", reflect.TypeOf((*Client)(nil).GetOrganizationTicketsIterator), ctx, organizationID, opts)
}

// GetOrganizationTicketsOBP mocks base method.
func (m *Client) GetOrganizationTicketsOBP(ctx context.Context, opts *zendesk.OBPOptions) ([]zendesk.Ticket, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationTicketsOBP", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Ticket)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationTicketsOBP indicates an expected call of GetOrganizationTicketsOBP.
func (mr *ClientMockRecorder) GetOrganizationTicketsOBP(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationTicketsOBP", reflect.TypeOf((*Client)(nil).GetOrganizationTicketsOBP), ctx, opts)
}

// GetOrganizationUsers mocks base method.
func (m *Client) GetOrganizationUsers(ctx context.Context, orgID int64, opts *zendesk.UserListOptions) ([]zendesk.User, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationUsers", ctx, orgID, opts)
	ret0, _ := ret[0].([]zendesk.User)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizationUsers indicates an expected call of GetOrganizationUsers.
func (mr *ClientMockRecorder) GetOrganizationUsers(ctx, orgID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationUsers", reflect.TypeOf((*Client)(nil).GetOrganizationUsers), ctx, orgID, opts)
}

// GetOrganizations mocks base method.
func (m *Client) GetOrganizations(ctx context.Context, opts *zendesk.OrganizationListOptions) ([]zendesk.Organization, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Organization)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *ClientMockRecorder) GetOrganizations(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*Client)(nil).GetOrganizations), ctx, opts)
}

// GetSLAPolicies mocks base method.
func (m *Client) GetSLAPolicies(ctx context.Context, opts *zendesk.SLAPolicyListOptions) ([]zendesk.SLAPolicy, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSLAPolicies", ctx, opts)
	ret0, _ := ret[0].([]zendesk.SLAPolicy)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSLAPolicies indicates an expected call of GetSLAPolicies.
func (mr *ClientMockRecorder) GetSLAPolicies(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSLAPolicies", reflect.TypeOf((*Client)(nil).GetSLAPolicies), ctx, opts)
}

// GetSLAPolicy mocks base method.
func (m *Client) GetSLAPolicy(ctx context.Context, id int64) (zendesk.SLAPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSLAPolicy", ctx, id)
	ret0, _ := ret[0].(zendesk.SLAPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSLAPolicy indicates an expected call of GetSLAPolicy.
func (mr *ClientMockRecorder) GetSLAPolicy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSLAPolicy", reflect.TypeOf((*Client)(nil).GetSLAPolicy), ctx, id)
}

// GetSourcesByTarget mocks base method.
func (m *Client) GetSourcesByTarget(ctx context.Context, fieldID, sourceType, targetID, targetType string, opts *zendesk.PageOptions) ([]zendesk.CustomObjectRecord, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourcesByTarget", ctx, fieldID, sourceType, targetID, targetType, opts)
	ret0, _ := ret[0].([]zendesk.CustomObjectRecord)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSourcesByTarget indicates an expected call of GetSourcesByTarget.
func (mr *ClientMockRecorder) GetSourcesByTarget(ctx, fieldID, sourceType, targetID, targetType, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourcesByTarget", reflect.TypeOf((*Client)(nil).GetSourcesByTarget), ctx, fieldID, sourceType, targetID, targetType, opts)
}

// GetTarget mocks base method.
func (m *Client) GetTarget(ctx context.Context, ticketID int64) (zendesk.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTarget", ctx, ticketID)
	ret0, _ := ret[0].(zendesk.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTarget indicates an expected call of GetTarget.
func (mr *ClientMockRecorder) GetTarget(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTarget", reflect.TypeOf((*Client)(nil).GetTarget), ctx, ticketID)
}

// GetTargets mocks base method.
func (m *Client) GetTargets(ctx context.Context) ([]zendesk.Target, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargets", ctx)
	ret0, _ := ret[0].([]zendesk.Target)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTargets indicates an expected call of GetTargets.
func (mr *ClientMockRecorder) GetTargets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargets", reflect.TypeOf((*Client)(nil).GetTargets), ctx)
}

// GetTicket mocks base method.
func (m *Client) GetTicket(ctx context.Context, id int64) (zendesk.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", ctx, id)
	ret0, _ := ret[0].(zendesk.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket.
func (mr *ClientMockRecorder) GetTicket(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*Client)(nil).GetTicket), ctx, id)
}

// GetTicketAudit mocks base method.
func (m *Client) GetTicketAudit(ctx context.Context, TicketID, ID int64) (zendesk.TicketAudit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketAudit", ctx, TicketID, ID)
	ret0, _ := ret[0].(zendesk.TicketAudit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketAudit indicates an expected call of GetTicketAudit.
func (mr *ClientMockRecorder) GetTicketAudit(ctx, TicketID, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketAudit", reflect.TypeOf((*Client)(nil).GetTicketAudit), ctx, TicketID, ID)
}

// GetTicketAudits mocks base method.
func (m *Client) GetTicketAudits(ctx context.Context, ticketID int64, opts zendesk.PageOptions) ([]zendesk.TicketAudit, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketAudits", ctx, ticketID, opts)
	ret0, _ := ret[0].([]zendesk.TicketAudit)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTicketAudits indicates an expected call of GetTicketAudits.
func (mr *ClientMockRecorder) GetTicketAudits(ctx, ticketID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketAudits", reflect.TypeOf((*Client)(nil).GetTicketAudits), ctx, ticketID, opts)
}

// GetTicketField mocks base method.
func (m *Client) GetTicketField(ctx context.Context, ticketID int64) (zendesk.TicketField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketField", ctx, ticketID)
	ret0, _ := ret[0].(zendesk.TicketField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketField indicates an expected call of GetTicketField.
func (mr *ClientMockRecorder) GetTicketField(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketField", reflect.TypeOf((*Client)(nil).GetTicketField), ctx, ticketID)
}

// GetTicketFields mocks base method.
func (m *Client) GetTicketFields(ctx context.Context) ([]zendesk.TicketField, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketFields", ctx)
	ret0, _ := ret[0].([]zendesk.TicketField)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTicketFields indicates an expected call of GetTicketFields.
func (mr *ClientMockRecorder) GetTicketFields(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketFields", reflect.TypeOf((*Client)(nil).GetTicketFields), ctx)
}

// GetTicketForm mocks base method.
func (m *Client) GetTicketForm(ctx context.Context, id int64) (zendesk.TicketForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketForm", ctx, id)
	ret0, _ := ret[0].(zendesk.TicketForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketForm indicates an expected call of GetTicketForm.
func (mr *ClientMockRecorder) GetTicketForm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketForm", reflect.TypeOf((*Client)(nil).GetTicketForm), ctx, id)
}

// GetTicketForms mocks base method.
func (m *Client) GetTicketForms(ctx context.Context, options *zendesk.TicketFormListOptions) ([]zendesk.TicketForm, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketForms", ctx, options)
	ret0, _ := ret[0].([]zendesk.TicketForm)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTicketForms indicates an expected call of GetTicketForms.
func (mr *ClientMockRecorder) GetTicketForms(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketForms", reflect.TypeOf((*Client)(nil).GetTicketForms), ctx, options)
}

// GetTicketOPT mocks base method.
func (m *Client) GetTicketOPT(ctx context.Context, opts *zendesk.TicketOptions) (zendesk.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketOPT", ctx, opts)
	ret0, _ := ret[0].(zendesk.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketOPT indicates an expected call of GetTicketOPT.
func (mr *ClientMockRecorder) GetTicketOPT(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketOPT", reflect.TypeOf((*Client)(nil).GetTicketOPT), ctx, opts)
}

// GetTicketTags mocks base method.
func (m *Client) GetTicketTags(ctx context.Context, ticketID int64) ([]zendesk.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketTags", ctx, ticketID)
	ret0, _ := ret[0].([]zendesk.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketTags indicates an expected call of GetTicketTags.
func (mr *ClientMockRecorder) GetTicketTags(ctx, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketTags", reflect.TypeOf((*Client)(nil).GetTicketTags), ctx, ticketID)
}

// GetTicketUsersCC mocks base method.
func (m *Client) GetTicketUsersCC(ctx context.Context, opts *zendesk.OBPOptions) ([]zendesk.User, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketUsersCC", ctx, opts)
	ret0, _ := ret[0].([]zendesk.User)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTicketUsersCC indicates an expected call of GetTicketUsersCC.
func (mr *ClientMockRecorder) GetTicketUsersCC(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketUsersCC", reflect.TypeOf((*Client)(nil).GetTicketUsersCC), ctx, opts)
}

// GetTickets mocks base method.
func (m *Client) GetTickets(ctx context.Context, opts *zendesk.TicketListOptions) ([]zendesk.Ticket, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickets", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Ticket)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTickets indicates an expected call of GetTickets.
func (mr *ClientMockRecorder) GetTickets(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickets", reflect.TypeOf((*Client)(nil).GetTickets), ctx, opts)
}

// GetTicketsCBP mocks base method.
func (m *Client) GetTicketsCBP(ctx context.Context, opts *zendesk.CBPOptions) ([]zendesk.Ticket, zendesk.CursorPaginationMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsCBP", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Ticket)
	ret1, _ := ret[1].(zendesk.CursorPaginationMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTicketsCBP indicates an expected call of GetTicketsCBP.
func (mr *ClientMockRecorder) GetTicketsCBP(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsCBP", reflect.TypeOf((*Client)(nil).GetTicketsCBP), ctx, opts)
}

// GetTicketsFromView mocks base method.
func (m *Client) GetTicketsFromView(arg0 context.Context, arg1 int64, arg2 *zendesk.TicketListOptions) ([]zendesk.Ticket, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsFromView", arg0, arg1, arg2)
	ret0, _ := ret[0].([]zendesk.Ticket)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTicketsFromView indicates an expected call of GetTicketsFromView.
func (mr *ClientMockRecorder) GetTicketsFromView(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsFromView", reflect.TypeOf((*Client)(nil).GetTicketsFromView), arg0, arg1, arg2)
}

// GetTicketsIterator mocks base method.
func (m *Client) GetTicketsIterator(ctx context.Context, opts *zendesk.PaginationOptions) *zendesk.Iterator[zendesk.Ticket] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsIterator", ctx, opts)
	ret0, _ := ret[0].(*zendesk.Iterator[zendesk.Ticket])
	return ret0
}

// GetTicketsIterator indicates an expected call of GetTicketsIterator.
func (mr *ClientMockRecorder) GetTicketsIterator(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsIterator", reflect.TypeOf((*Client)(nil).GetTicketsIterator), ctx, opts)
}

// GetTicketsOBP mocks base method.
func (m *Client) GetTicketsOBP(ctx context.Context, opts *zendesk.OBPOptions) ([]zendesk.Ticket, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsOBP", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Ticket)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTicketsOBP indicates an expected call of GetTicketsOBP.
func (mr *ClientMockRecorder) GetTicketsOBP(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsOBP", reflect.TypeOf((*Client)(nil).GetTicketsOBP), ctx, opts)
}

// GetTrigger mocks base method.
func (m *Client) GetTrigger(ctx context.Context, id int64) (zendesk.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrigger", ctx, id)
	ret0, _ := ret[0].(zendesk.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrigger indicates an expected call of GetTrigger.
func (mr *ClientMockRecorder) GetTrigger(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrigger", reflect.TypeOf((*Client)(nil).GetTrigger), ctx, id)
}

// GetTriggers mocks base method.
func (m *Client) GetTriggers(ctx context.Context, opts *zendesk.TriggerListOptions) ([]zendesk.Trigger, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggers", ctx, opts)
	ret0, _ := ret[0].([]zendesk.Trigger)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTriggers indicates an expected call of GetTriggers.
func (mr *ClientMockRecorder) GetTriggers(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*Client)(nil).GetTriggers), ctx, opts)
}

// GetUser mocks base method.
func (m *Client) GetUser(ctx context.Context, userID int64) (zendesk.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(zendesk.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *ClientMockRecorder) GetUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Client)(nil).GetUser), ctx, userID)
}

// GetUserFields mocks base method.
func (m *Client) GetUserFields(ctx context.Context, opts *zendesk.UserFieldListOptions) ([]zendesk.UserField, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFields", ctx, opts)
	ret0, _ := ret[0].([]zendesk.UserField)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserFields indicates an expected call of GetUserFields.
func (mr *ClientMockRecorder) GetUserFields(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFields", reflect.TypeOf((*Client)(nil).GetUserFields), ctx, opts)
}

// GetUserRelated mocks base method.
func (m *Client) GetUserRelated(ctx context.Context, userID int64) (zendesk.UserRelated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRelated", ctx, userID)
	ret0, _ := ret[0].(zendesk.UserRelated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRelated indicates an expected call of GetUserRelated.
func (mr *ClientMockRecorder) GetUserRelated(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRelated", reflect.TypeOf((*Client)(nil).GetUserRelated), ctx, userID)
}

// GetUserTags mocks base method.
func (m *Client) GetUserTags(ctx context.Context, userID int64) ([]zendesk.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTags", ctx, userID)
	ret0, _ := ret[0].([]zendesk.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTags indicates an expected call of GetUserTags.
func (mr *ClientMockRecorder) GetUserTags(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTags", reflect.TypeOf((*Client)(nil).GetUserTags), ctx, userID)
}

// GetUsers mocks base method.
func (m *Client) GetUsers(ctx context.Context, opts *zendesk.UserListOptions) ([]zendesk.User, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, opts)
	ret0, _ := ret[0].([]zendesk.User)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *ClientMockRecorder) GetUsers(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*Client)(nil).GetUsers), ctx, opts)
}

// GetUsersByGroupID mocks base method.
func (m *Client) GetUsersByGroupID(ctx context.Context, groupID int64, opts *zendesk.UserListOptions) ([]zendesk.User, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByGroupID", ctx, groupID, opts)
	ret0, _ := ret[0].([]zendesk.User)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsersByGroupID indicates an expected call of GetUsersByGroupID.
func (mr *ClientMockRecorder) GetUsersByGroupID(ctx, groupID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByGroupID", reflect.TypeOf((*Client)(nil).GetUsersByGroupID), ctx, groupID, opts)
}

// GetView mocks base method.
func (m *Client) GetView(arg0 context.Context, arg1 int64) (zendesk.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetView", arg0, arg1)
	ret0, _ := ret[0].(zendesk.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetView indicates an expected call of GetView.
func (mr *ClientMockRecorder) GetView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetView", reflect.TypeOf((*Client)(nil).GetView), arg0, arg1)
}

// GetViews mocks base method.
func (m *Client) GetViews(arg0 context.Context) ([]zendesk.View, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViews", arg0)
	ret0, _ := ret[0].([]zendesk.View)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetViews indicates an expected call of GetViews.
func (mr *ClientMockRecorder) GetViews(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViews", reflect.TypeOf((*Client)(nil).GetViews), arg0)
}

// GetWebhook mocks base method.
func (m *Client) GetWebhook(ctx context.Context, webhookID string) (*zendesk.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", ctx, webhookID)
	ret0, _ := ret[0].(*zendesk.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *ClientMockRecorder) GetWebhook(ctx, webhookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*Client)(nil).GetWebhook), ctx, webhookID)
}

// GetWebhookSigningSecret mocks base method.
func (m *Client) GetWebhookSigningSecret(ctx context.Context, webhookID string) (*zendesk.WebhookSigningSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookSigningSecret", ctx, webhookID)
	ret0, _ := ret[0].(*zendesk.WebhookSigningSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookSigningSecret indicates an expected call of GetWebhookSigningSecret.
func (mr *ClientMockRecorder) GetWebhookSigningSecret(ctx, webhookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookSigningSecret", reflect.TypeOf((*Client)(nil).GetWebhookSigningSecret), ctx, webhookID)
}

// ListCustomObjectFields mocks base method.
func (m *Client) ListCustomObjectFields(ctx context.Context, customObjectKey string) ([]zendesk.CustomObjectField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomObjectFields", ctx, customObjectKey)
	ret0, _ := ret[0].([]zendesk.CustomObjectField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomObjectFields indicates an expected call of ListCustomObjectFields.
func (mr *ClientMockRecorder) ListCustomObjectFields(ctx, customObjectKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomObjectFields", reflect.TypeOf((*Client)(nil).ListCustomObjectFields), ctx, customObjectKey)
}

// ListCustomObjectRecords mocks base method.
func (m *Client) ListCustomObjectRecords(ctx context.Context, customObjectKey string, opts *zendesk.CustomObjectListOptions) ([]zendesk.CustomObjectRecord, zendesk.CursorPaginationMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomObjectRecords", ctx, customObjectKey, opts)
	ret0, _ := ret[0].([]zendesk.CustomObjectRecord)
	ret1, _ := ret[1].(zendesk.CursorPaginationMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomObjectRecords indicates an expected call of ListCustomObjectRecords.
func (mr *ClientMockRecorder) ListCustomObjectRecords(ctx, customObjectKey, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomObjectRecords", reflect.TypeOf((*Client)(nil).ListCustomObjectRecords), ctx, customObjectKey, opts)
}

// ListCustomTicketStatuses mocks base method.
func (m *Client) ListCustomTicketStatuses(ctx context.Context, opts *zendesk.CustomTicketStatusOptions) ([]zendesk.CustomStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomTicketStatuses", ctx, opts)
	ret0, _ := ret[0].([]zendesk.CustomStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomTicketStatuses indicates an expected call of ListCustomTicketStatuses.
func (mr *ClientMockRecorder) ListCustomTicketStatuses(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomTicketStatuses", reflect.TypeOf((*Client)(nil).ListCustomTicketStatuses), ctx, opts)
}

// ListInstallations mocks base method.
func (m *Client) ListInstallations(ctx context.Context) ([]zendesk.AppInstallation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstallations", ctx)
	ret0, _ := ret[0].([]zendesk.AppInstallation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstallations indicates an expected call of ListInstallations.
func (mr *ClientMockRecorder) ListInstallations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstallations", reflect.TypeOf((*Client)(nil).ListInstallations), ctx)
}

// ListTicketComments mocks base method.
func (m *Client) ListTicketComments(ctx context.Context, ticketID int64, opts *zendesk.ListTicketCommentsOptions) (*zendesk.ListTicketCommentsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTicketComments", ctx, ticketID, opts)
	ret0, _ := ret[0].(*zendesk.ListTicketCommentsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTicketComments indicates an expected call of ListTicketComments.
func (mr *ClientMockRecorder) ListTicketComments(ctx, ticketID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTicketComments", reflect.TypeOf((*Client)(nil).ListTicketComments), ctx, ticketID, opts)
}

// ListUserIdentities mocks base method.
func (m *Client) ListUserIdentities(ctx context.Context, userID int64) ([]zendesk.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserIdentities", ctx, userID)
	ret0, _ := ret[0].([]zendesk.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserIdentities indicates an expected call of ListUserIdentities.
func (mr *ClientMockRecorder) ListUserIdentities(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserIdentities", reflect.TypeOf((*Client)(nil).ListUserIdentities), ctx, userID)
}

// MakeCommentPrivate mocks base method.
func (m *Client) MakeCommentPrivate(ctx context.Context, ticketID, ticketCommentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeCommentPrivate", ctx, ticketID, ticketCommentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeCommentPrivate indicates an expected call of MakeCommentPrivate.
func (mr *ClientMockRecorder) MakeCommentPrivate(ctx, ticketID, ticketCommentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeCommentPrivate", reflect.TypeOf((*Client)(nil).MakeCommentPrivate), ctx, ticketID, ticketCommentID)
}

// MakeUserIdentityPrimary mocks base method.
func (m *Client) MakeUserIdentityPrimary(ctx context.Context, userID, userIdentityID int64) ([]zendesk.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeUserIdentityPrimary", ctx, userID, userIdentityID)
	ret0, _ := ret[0].([]zendesk.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeUserIdentityPrimary indicates an expected call of MakeUserIdentityPrimary.
func (mr *ClientMockRecorder) MakeUserIdentityPrimary(ctx, userID, userIdentityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeUserIdentityPrimary", reflect.TypeOf((*Client)(nil).MakeUserIdentityPrimary), ctx, userID, userIdentityID)
}

// Post mocks base method.
func (m *Client) Post(ctx context.Context, path string, data any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, path, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *ClientMockRecorder) Post(ctx, path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*Client)(nil).Post), ctx, path, data)
}

// Put mocks base method.
func (m *Client) Put(ctx context.Context, path string, data any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, path, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *ClientMockRecorder) Put(ctx, path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*Client)(nil).Put), ctx, path, data)
}

// RemoveTicketTags mocks base method.
func (m *Client) RemoveTicketTags(ctx context.Context, ticketID int64, tags []zendesk.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTicketTags", ctx, ticketID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTicketTags indicates an expected call of RemoveTicketTags.
func (mr *ClientMockRecorder) RemoveTicketTags(ctx, ticketID, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTicketTags", reflect.TypeOf((*Client)(nil).RemoveTicketTags), ctx, ticketID, tags)
}

// RemoveUserTags mocks base method.
func (m *Client) RemoveUserTags(ctx context.Context, userID int64, tags []zendesk.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserTags", ctx, userID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserTags indicates an expected call of RemoveUserTags.
func (mr *ClientMockRecorder) RemoveUserTags(ctx, userID, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserTags", reflect.TypeOf((*Client)(nil).RemoveUserTags), ctx, userID, tags)
}

// Search mocks base method.
func (m *Client) Search(ctx context.Context, opts *zendesk.SearchOptions) (zendesk.SearchResults, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, opts)
	ret0, _ := ret[0].(zendesk.SearchResults)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search.
func (mr *ClientMockRecorder) Search(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*Client)(nil).Search), ctx, opts)
}

// SearchCount mocks base method.
func (m *Client) SearchCount(ctx context.Context, opts *zendesk.CountOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCount", ctx, opts)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCount indicates an expected call of SearchCount.
func (mr *ClientMockRecorder) SearchCount(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCount", reflect.TypeOf((*Client)(nil).SearchCount), ctx, opts)
}

// SearchCustomObjectRecords mocks base method.
func (m *Client) SearchCustomObjectRecords(ctx context.Context, customObjectKey string, opts *zendesk.SearchCustomObjectRecordsOptions) ([]zendesk.CustomObjectRecord, zendesk.CursorPaginationMeta, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCustomObjectRecords", ctx, customObjectKey, opts)
	ret0, _ := ret[0].([]zendesk.CustomObjectRecord)
	ret1, _ := ret[1].(zendesk.CursorPaginationMeta)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SearchCustomObjectRecords indicates an expected call of SearchCustomObjectRecords.
func (mr *ClientMockRecorder) SearchCustomObjectRecords(ctx, customObjectKey, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCustomObjectRecords", reflect.TypeOf((*Client)(nil).SearchCustomObjectRecords), ctx, customObjectKey, opts)
}

// SearchUsers mocks base method.
func (m *Client) SearchUsers(ctx context.Context, opts *zendesk.SearchUsersOptions) ([]zendesk.User, zendesk.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", ctx, opts)
	ret0, _ := ret[0].([]zendesk.User)
	ret1, _ := ret[1].(zendesk.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *ClientMockRecorder) SearchUsers(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*Client)(nil).SearchUsers), ctx, opts)
}

// SetDefaultOrganization mocks base method.
func (m *Client) SetDefaultOrganization(arg0 context.Context, arg1 zendesk.OrganizationMembershipOptions) (zendesk.OrganizationMembership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultOrganization", arg0, arg1)
	ret0, _ := ret[0].(zendesk.OrganizationMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultOrganization indicates an expected call of SetDefaultOrganization.
func (mr *ClientMockRecorder) SetDefaultOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultOrganization", reflect.TypeOf((*Client)(nil).SetDefaultOrganization), arg0, arg1)
}

// ShowCustomObjectRecord mocks base method.
func (m *Client) ShowCustomObjectRecord(ctx context.Context, customObjectKey, customObjectRecordID string) (*zendesk.CustomObjectRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowCustomObjectRecord", ctx, customObjectKey, customObjectRecordID)
	ret0, _ := ret[0].(*zendesk.CustomObjectRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowCustomObjectRecord indicates an expected call of ShowCustomObjectRecord.
func (mr *ClientMockRecorder) ShowCustomObjectRecord(ctx, customObjectKey, customObjectRecordID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowCustomObjectRecord", reflect.TypeOf((*Client)(nil).ShowCustomObjectRecord), ctx, customObjectKey, customObjectRecordID)
}

// ShowCustomTicketStatus mocks base method.
func (m *Client) ShowCustomTicketStatus(ctx context.Context, customStatusID int64) (*zendesk.CustomStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowCustomTicketStatus", ctx, customStatusID)
	ret0, _ := ret[0].(*zendesk.CustomStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowCustomTicketStatus indicates an expected call of ShowCustomTicketStatus.
func (mr *ClientMockRecorder) ShowCustomTicketStatus(ctx, customStatusID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowCustomTicketStatus", reflect.TypeOf((*Client)(nil).ShowCustomTicketStatus), ctx, customStatusID)
}

// UpdateAutomation mocks base method.
func (m *Client) UpdateAutomation(ctx context.Context, id int64, automation zendesk.Automation) (zendesk.Automation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutomation", ctx, id, automation)
	ret0, _ := ret[0].(zendesk.Automation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAutomation indicates an expected call of UpdateAutomation.
func (mr *ClientMockRecorder) UpdateAutomation(ctx, id, automation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutomation", reflect.TypeOf((*Client)(nil).UpdateAutomation), ctx, id, automation)
}

// UpdateBrand mocks base method.
func (m *Client) UpdateBrand(ctx context.Context, brandID int64, brand zendesk.Brand) (zendesk.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrand", ctx, brandID, brand)
	ret0, _ := ret[0].(zendesk.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBrand indicates an expected call of UpdateBrand.
func (mr *ClientMockRecorder) UpdateBrand(ctx, brandID, brand any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrand", reflect.TypeOf((*Client)(nil).UpdateBrand), ctx, brandID, brand)
}

// UpdateCustomObjectRecord mocks base method.
func (m *Client) UpdateCustomObjectRecord(ctx context.Context, customObjectKey, customObjectRecordID string, record zendesk.CustomObjectRecord) (*zendesk.CustomObjectRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomObjectRecord", ctx, customObjectKey, customObjectRecordID, record)
	ret0, _ := ret[0].(*zendesk.CustomObjectRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomObjectRecord indicates an expected call of UpdateCustomObjectRecord.
func (mr *ClientMockRecorder) UpdateCustomObjectRecord(ctx, customObjectKey, customObjectRecordID, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomObjectRecord", reflect.TypeOf((*Client)(nil).UpdateCustomObjectRecord), ctx, customObjectKey, customObjectRecordID, record)
}

// UpdateDynamicContentItem mocks base method.
func (m *Client) UpdateDynamicContentItem(ctx context.Context, id int64, item zendesk.DynamicContentItem) (zendesk.DynamicContentItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDynamicContentItem", ctx, id, item)
	ret0, _ := ret[0].(zendesk.DynamicContentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDynamicContentItem indicates an expected call of UpdateDynamicContentItem.
func (mr *ClientMockRecorder) UpdateDynamicContentItem(ctx, id, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDynamicContentItem", reflect.TypeOf((*Client)(nil).UpdateDynamicContentItem), ctx, id, item)
}

// UpdateGroup mocks base method.
func (m *Client) UpdateGroup(ctx context.Context, groupID int64, group zendesk.Group) (zendesk.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, groupID, group)
	ret0, _ := ret[0].(zendesk.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *ClientMockRecorder) UpdateGroup(ctx, groupID, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*Client)(nil).UpdateGroup), ctx, groupID, group)
}

// UpdateMacro mocks base method.
func (m *Client) UpdateMacro(ctx context.Context, macroID int64, macro zendesk.Macro) (zendesk.Macro, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMacro", ctx, macroID, macro)
	ret0, _ := ret[0].(zendesk.Macro)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMacro indicates an expected call of UpdateMacro.
func (mr *ClientMockRecorder) UpdateMacro(ctx, macroID, macro any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMacro", reflect.TypeOf((*Client)(nil).UpdateMacro), ctx, macroID, macro)
}

// UpdateOrganization mocks base method.
func (m *Client) UpdateOrganization(ctx context.Context, orgID int64, org zendesk.Organization) (zendesk.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, orgID, org)
	ret0, _ := ret[0].(zendesk.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *ClientMockRecorder) UpdateOrganization(ctx, orgID, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*Client)(nil).UpdateOrganization), ctx, orgID, org)
}

// UpdateSLAPolicy mocks base method.
func (m *Client) UpdateSLAPolicy(ctx context.Context, id int64, slaPolicy zendesk.SLAPolicy) (zendesk.SLAPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSLAPolicy", ctx, id, slaPolicy)
	ret0, _ := ret[0].(zendesk.SLAPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSLAPolicy indicates an expected call of UpdateSLAPolicy.
func (mr *ClientMockRecorder) UpdateSLAPolicy(ctx, id, slaPolicy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSLAPolicy", reflect.TypeOf((*Client)(nil).UpdateSLAPolicy), ctx, id, slaPolicy)
}

// UpdateTarget mocks base method.
func (m *Client) UpdateTarget(ctx context.Context, ticketID int64, field zendesk.Target) (zendesk.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTarget", ctx, ticketID, field)
	ret0, _ := ret[0].(zendesk.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTarget indicates an expected call of UpdateTarget.
func (mr *ClientMockRecorder) UpdateTarget(ctx, ticketID, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTarget", reflect.TypeOf((*Client)(nil).UpdateTarget), ctx, ticketID, field)
}

// UpdateTicket mocks base method.
func (m *Client) UpdateTicket(ctx context.Context, ticketID int64, ticket zendesk.Ticket) (zendesk.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", ctx, ticketID, ticket)
	ret0, _ := ret[0].(zendesk.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *ClientMockRecorder) UpdateTicket(ctx, ticketID, ticket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*Client)(nil).UpdateTicket), ctx, ticketID, ticket)
}

// UpdateTicketField mocks base method.
func (m *Client) UpdateTicketField(ctx context.Context, ticketID int64, field zendesk.TicketField) (zendesk.TicketField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicketField", ctx, ticketID, field)
	ret0, _ := ret[0].(zendesk.TicketField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicketField indicates an expected call of UpdateTicketField.
func (mr *ClientMockRecorder) UpdateTicketField(ctx, ticketID, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicketField", reflect.TypeOf((*Client)(nil).UpdateTicketField), ctx, ticketID, field)
}

// UpdateTicketForm mocks base method.
func (m *Client) UpdateTicketForm(ctx context.Context, id int64, form zendesk.TicketForm) (zendesk.TicketForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicketForm", ctx, id, form)
	ret0, _ := ret[0].(zendesk.TicketForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicketForm indicates an expected call of UpdateTicketForm.
func (mr *ClientMockRecorder) UpdateTicketForm(ctx, id, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicketForm", reflect.TypeOf((*Client)(nil).UpdateTicketForm), ctx, id, form)
}

// UpdateTrigger mocks base method.
func (m *Client) UpdateTrigger(ctx context.Context, id int64, trigger zendesk.Trigger) (zendesk.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrigger", ctx, id, trigger)
	ret0, _ := ret[0].(zendesk.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrigger indicates an expected call of UpdateTrigger.
func (mr *ClientMockRecorder) UpdateTrigger(ctx, id, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrigger", reflect.TypeOf((*Client)(nil).UpdateTrigger), ctx, id, trigger)
}

// UpdateUser mocks base method.
func (m *Client) UpdateUser(ctx context.Context, userID int64, user zendesk.User) (zendesk.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userID, user)
	ret0, _ := ret[0].(zendesk.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *ClientMockRecorder) UpdateUser(ctx, userID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*Client)(nil).UpdateUser), ctx, userID, user)
}

// UpdateWebhook mocks base method.
func (m *Client) UpdateWebhook(ctx context.Context, webhookID string, hook *zendesk.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhook", ctx, webhookID, hook)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWebhook indicates an expected call of UpdateWebhook.
func (mr *ClientMockRecorder) UpdateWebhook(ctx, webhookID, hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*Client)(nil).UpdateWebhook), ctx, webhookID, hook)
}

// UploadAttachment mocks base method.
func (m *Client) UploadAttachment(ctx context.Context, filename, token string) zendesk.UploadWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAttachment", ctx, filename, token)
	ret0, _ := ret[0].(zendesk.UploadWriter)
	return ret0
}

// UploadAttachment indicates an expected call of UploadAttachment.
func (mr *ClientMockRecorder) UploadAttachment(ctx, filename, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAttachment", reflect.TypeOf((*Client)(nil).UploadAttachment), ctx, filename, token)
}
